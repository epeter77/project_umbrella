# project_umbrella/settings/base.py

"""
Django settings for project_umbrella project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os 
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Add the 'apps' directory to the Python path
# sys.path.insert(0, os.path.join(BASE_DIR, 'applications'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# Allow all host headers for local development
ALLOWED_HOSTS = ['*']


# Tell Django to set cookies that are valid for all subdomains
CSRF_COOKIE_DOMAIN = ".localhost"
SESSION_COOKIE_DOMAIN = ".localhost"

# Explicitly trust these origins for POST requests
CSRF_TRUSTED_ORIGINS = [
    'http://*.localhost', 
    'http://127.0.0.1', 
    'http://localhost:8001',
    'http://stark.localhost:8001', # Add this
    'http://acme.localhost:8001',  # Add this
]

# Use the cached_db session backend to resolve tenant conflicts.
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

SITE_ID = 1

# NOW, add our new configuration below the original INSTALLED_APPS.
# We will then re-define INSTALLED_APPS at the end.

# -----------------------------------------------------------------------------
# APPLICATION DEFINITION
# -----------------------------------------------------------------------------

# Define which apps are installed on the public (shared) schema
SHARED_APPS = [
    'django_tenants',
    'applications.tenants',

    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Our custom "shared" apps must use their full Python path
    'applications.users',
    'applications.utils',
]

# Define which apps are installed on each tenant's schema
TENANT_APPS = [
    'django.contrib.contenttypes',
    # 'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Our custom "tenant-specific" apps
    'applications.customers',
    'applications.leases',
]

# This combines the two lists above into the final list of installed apps
INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

# These model references MUST use the simple 'app_label.ModelName' format
TENANT_MODEL = "tenants.AdminTenant"
TENANT_DOMAIN_MODEL = "tenants.Domain"
AUTH_USER_MODEL = 'users.User'
PUBLIC_SCHEMA_URLCONF = "project_umbrella.public_urls"

# Tell Django which database engine to use
DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

MIDDLEWARE = [
    "django_tenants.middleware.main.TenantMainMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
#    "project_umbrella.middleware.TenantBrandingMiddleware",
    "project_umbrella.debug_middleware.SessionDebugMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project_umbrella.public_urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "applications.utils.context_processors.tenant_context", 
            ],
        },
    },
]

WSGI_APPLICATION = "project_umbrella.wsgi.application"

AUTHENTICATION_BACKENDS = [
    'applications.users.backends.TenantAwareBackend',
]

# ==============================================================================
# Database Configuration
# Reads connection details from environment variables set by docker-compose.
db_host = os.environ.get('DB_HOST', 'localhost')
print(f"--- Connecting to DB at host: {db_host} ---")

DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',
        'NAME': os.environ.get('POSTGRES_DB'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': db_host,
        'PORT': '5432', # The port inside the container network is always 5432
    }
}
# ==============================================================================

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
# This tells Django where to find your project-level static files
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# This tells `collectstatic` where to dump all the collected files.
STATIC_ROOT = BASE_DIR / "staticfiles"

# Add these settings for user-uploaded files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

JAZZMIN_SETTINGS = {
    # Title on the login screen (19 characters max)
    "site_title": "Project Umbrella",

    # Title on the brand (19 characters max) and html title
    "site_header": "Umbrella",

    # Logo to use for login form in dark themes (defaults to site_logo)
    "login_logo_dark": None,

    # Logo to use for your site, must be present in static files
    "site_logo": "img/Logo.jpg",

    # CSS classes that are applied to the logo above
    "site_logo_classes": "img-fluid",

    # Welcome text on the login screen
    "welcome_sign": "Welcome to Umbrella Admin",

    # Copyright on the footer
    "copyright": "Crimson Mammoth, LLC.",

    # The model admin to search from the search bar, search model admin has to be defined in your admin.py
    # "search_model": "auth.User",

    ############
    # UI Tweaks
    ############
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    "custom_css": None,
    "custom_js": None,
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": True,
 # For a list of themes, see https://bootswatch.com/
    "theme": "darkly",

    # UI Customisation options
    "ui_tweaks": {
        "navbar_small_text": False,
        "footer_small_text": False,
        "body_small_text": False,
        "brand_small_text": False,
        "brand_colour": "navbar-danger", # Use a red color for the brand
        "accent": "accent-danger",
        "navbar": "navbar-dark",
        "no_navbar_border": False,
        "sidebar": "sidebar-dark-danger", # Use red for the sidebar
        "sidebar_nav_small_text": False,
        "sidebar_disable_expand": False,
        "sidebar_nav_child_indent": False,
        "sidebar_nav_compact_style": False,
        "sidebar_nav_legacy_style": False,
        "sidebar_nav_flat_style": True,
        "theme": "darkly",
        "button_classes": {
            "primary": "btn-primary",
            "secondary": "btn-secondary",
            "info": "btn-info",
            "warning": "btn-warning",
            "danger": "btn-danger",
            "success": "btn-success"
        }
    }
}

# ADD THIS LINE RIGHT AFTER YOUR JAZZMIN_SETTINGS DICTIONARY
JAZZMIN_SETTINGS_GETTER = 'applications.utils.jazzmin.get_jazzmin_settings'

# URL to redirect to after a successful login.
LOGIN_REDIRECT_URL = '/admin/'